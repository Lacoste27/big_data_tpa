setwd("/vagrant/BigData/Projet/analyse");
getwd();
library(RJDBC)
hive_jdbc_jar <- "/usr/local/hive/jdbc/hive-jdbc-3.1.3-standalone.jar"
hive_driver <- "org.apache.hive.jdbc.HiveDriver"
hive_url <- "jdbc:hive2://localhost:10000"
driver <- JDBC(hive_driver, hive_jdbc_jar)
connection <- dbConnect(drv, hive_url, "vagrant", "")
connection <- dbConnect(drive, hive_url, "vagrant", "")
connection <- dbConnect(driver, hive_url, "vagrant", "")
show_databases <- dbGetQuery(connection, "show databases")
print(show_databases);
marketing <- dbGetQuery(conn, "select * from concessionaire.marketing_ext")
marketing <- dbGetQuery(connection, "select * from concessionaire.marketing_ext")
mode(marketing)
marketing
print(marketing)
quit()
gc()
library(RJDBC)
library(ggplot2)
library(cluster)
hive_jdbc_jar <- "C:/Vm/INSTALL_MV_BIGDATA_BOX/lib/hive-jdbc-3.1.3-standalone.jar"
hive_driver <- "org.apache.hive.jdbc.HiveDriver"
hive_url <- "jdbc:hive2://localhost:10000/"
drv <- JDBC(hive_driver, hive_jdbc_jar)
conn <- dbConnect(drv, hive_url, "oracle", "welcome1")
client_immatriculation <- dbGetQuery(conn, "SELECT * FROM concessionaire.client_immatriculation")
gc()
library(RJDBC)
library(ggplot2)
library(ggfortify)
library(RColorBrewer)
library(dplyr)
library(rpart)
library(rpart.plot)
hive_jdbc_jar <- "C:/Vm/INSTALL_MV_BIGDATA_BOX/lib/hive-jdbc-3.1.3-standalone.jar"
hive_driver <- "org.apache.hive.jdbc.HiveDriver"
hive_url <- "jdbc:hive2://localhost:10000/concessionnaire"
drv <- JDBC(hive_driver, hive_jdbc_jar, "`")
conn <- dbConnect(drv, hive_url, "oracle", "welcome1")
hive_url <- "jdbc:hive2://localhost:10000/"
drv <- JDBC(hive_driver, hive_jdbc_jar, "`")
conn <- dbConnect(drv, hive_url, "oracle", "welcome1")
query <- "SELECT * FROM client_immatriculation"
result <- dbGetQuery(conn, query)
query <- "SELECT * FROM concessionaire.client_immatriculation"
result <- dbGetQuery(conn, query)
View(result)
View(conn)
library(RJDBC)
library(ggplot2)
library(ggfortify)
library(RColorBrewer)
library(dplyr)
library(rpart)
library(rpart.plot)
hive_jdbc_jar <- "C:/Vm/INSTALL_MV_BIGDATA_BOX/lib/hive-jdbc-3.1.3-standalone.jar"
hive_driver <- "org.apache.hive.jdbc.HiveDriver"
hive_url <- "jdbc:hive2://localhost:10000/"
drv <- JDBC(hive_driver, hive_jdbc_jar, "`")
conn <- dbConnect(drv, hive_url, "oracle", "welcome1")
query <- "SELECT * FROM concessionaire.v_clients"
result <- dbGetQuery(conn, query)
clients_imma_df <- as.data.frame(result)
colnames(clients_imma_df) <- sub("^v_clients\\.", "", colnames(clients_imma_df))
# Check for columns with zero variance
zero_var_cols <- colnames(clients_imma_df)[apply(clients_imma_df, 2, var) == 0]
# Remove columns with zero variance
clients_imma_df_filtered <- clients_imma_df[, !(names(clients_imma_df) %in% zero_var_cols)]
selected_variables <- c(
"immatriculation_puissance",
"immatriculation_nbportes",
"immatriculation_prix",
"clients_age",
"clients_sexe",
"clients_situationfamiliale",
"clients_nbenfantsacharge",
"clients_deuxiemevoiture"
)
# Créer un nouveau dataframe avec seulement les variables sélectionnées
data_for_clustering <- clients_imma_df_filtered[selected_variables]
selected_variables <- c(
"immatriculation_puissance",
"immatriculation_nbportes",
"immatriculation_prix",
"clients_age",
"clients_sexe",
"clients_situationfamiliale",
"clients_nbenfantacharge",
"clients_deuxiemevoiture"
)
# Créer un nouveau dataframe avec seulement les variables sélectionnées
data_for_clustering <- clients_imma_df_filtered[selected_variables]
# Scale numeric columns
clients_imma_df_scaled <- scale(data_for_clustering[, sapply(data_for_clustering, is.numeric)])
wss <- (nrow(clients_imma_df_scaled) - 1) * sum(apply(clients_imma_df_scaled, 2, var))
for (i in 2:15) wss[i] <- sum(kmeans(clients_imma_df_scaled, centers = i)$withinss)
plot(1:15, wss, type = "b", xlab = "Nombre de clusters", ylab = "Somme des carrés")
plot(1:15, wss, type = "b", xlab = "Nombre de clusters", ylab = "Somme des carrés")
wss <- (nrow(clients_imma_df_scaled) - 1) * sum(apply(clients_imma_df_scaled, 2, var))
for (i in 2:15) wss[i] <- sum(kmeans(clients_imma_df_scaled, centers = i)$withinss)
plot(1:15, wss, type = "b", xlab = "Nombre de clusters", ylab = "Somme des carrés")
# Supposons que le nombre optimal de clusters est 3
set.seed(123) # Pour la reproductibilité
kmeans_result <- kmeans(clients_imma_df_scaled, centers = 5)
clients_imma_df$cluster <- kmeans_result$cluster
# Affichage des caractéristiques moyennes par cluster
aggregate(clients_imma_df_scaled, by = list(cluster = kmeans_result$cluster), FUN = mean)
# Utilisation de PCA pour la visualisation
pca_result <- prcomp(clients_imma_df_scaled)
ggplot(clients_imma_df, aes(x = pca_result$x[, 1], y = pca_result$x[, 2], color = factor(kmeans_result$cluster))) +
geom_point() +
theme_minimal() +
labs(x = "PC1", y = "PC2", color = "Cluster")
clients_imma_df
print(names(clients_imma_df))
mean_puissance_nbportes <- clients_imma_df %>%
group_by(cluster) %>%
summarise(
mean_puissance = mean(immatriculation_puissance),
mean_nbportes = mean(immatriculation_nbportes),
mean_nbplaces = mean(immatriculation_nbplaces),
mean_prix = mean(immatriculation_prix)
)
# Print the result
print(mean_puissance_nbportes)
dominant_situation_familiale <- clients_imma_df %>%
group_by(cluster, clients_situationfamiliale) %>%
summarise(count = n()) %>%
top_n(1, count) %>%
select(cluster, clients_situationfamiliale)
print(dominant_situation_familiale)
# Define the vehicle categories corresponding to each cluster
vehicle_categories <- c("Citadine", "Berline", "Citadine", "SUV", "Sportive")
# Map the vehicle categories to the clusters in the DataFrame
clients_imma_df$vehicle_category <- vehicle_categories[clients_imma_df$cluster]
# Display the first few rows to verify the mapping
head(clients_imma_df)
# Selecting and printing the 'marque', 'nom', and 'vehicle_category' columns
selected_columns <- clients_imma_df[, c("immatriculation_marque", "immatriculation_nom", "vehicle_category")]
print(selected_columns)
ggplot(clients_imma_df, aes(x = factor(cluster), fill = vehicle_category)) +
geom_bar() +
theme_minimal() +
labs(x = "Cluster", y = "Nombre de clients", fill = "Catégorie de véhicules") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
query <- "SELECT * FROM clients"
gc()
library(RJDBC)
library(ggplot2)
library(ggfortify)
library(RColorBrewer)
library(dplyr)
library(rpart)
library(rpart.plot)
hive_jdbc_jar <- "C:/Vm/INSTALL_MV_BIGDATA_BOX/lib/hive-jdbc-3.1.3-standalone.jar"
hive_driver <- "org.apache.hive.jdbc.HiveDriver"
hive_url <- "jdbc:hive2://localhost:10000/"
drv <- JDBC(hive_driver, hive_jdbc_jar, "`")
conn <- dbConnect(drv, hive_url, "oracle", "welcome1")
query <- "SELECT * FROM concessionaire.v_clients"
result <- dbGetQuery(conn, query)
mode(result)
clients_imma_df <- as.data.frame(result)
mode(clients_imma_df)
hive_jdbc_jar <- "C:/Vm/INSTALL_MV_BIGDATA_BOX/lib/hive-jdbc-3.1.3-standalone.jar"
hive_driver <- "org.apache.hive.jdbc.HiveDriver"
hive_url <- "jdbc:hive2://localhost:10000/"
drv <- JDBC(hive_driver, hive_jdbc_jar, "`")
conn <- dbConnect(drv, hive_url, "oracle", "welcome1")
query <- "SELECT * FROM concessionaire.v_clients"
clients_imma_df <- dbGetQuery(conn, query)
mode(clients_imma_df)
colnames(clients_imma_df) <- sub("^v_clients\\.", "", colnames(clients_imma_df))
# Check for columns with zero variance
zero_var_cols <- colnames(clients_imma_df)[apply(clients_imma_df, 2, var) == 0]
# Remove columns with zero variance
clients_imma_df_filtered <- clients_imma_df[, !(names(clients_imma_df) %in% zero_var_cols)]
selected_variables <- c(
"immatriculation_puissance",
"immatriculation_nbportes",
"immatriculation_prix",
"clients_age",
"clients_sexe",
"clients_situationfamiliale",
"clients_nbenfantacharge",
"clients_deuxiemevoiture"
)
# Créer un nouveau dataframe avec seulement les variables sélectionnées
data_for_clustering <- clients_imma_df_filtered[selected_variables]
# Scale numeric columns
clients_imma_df_scaled <- scale(data_for_clustering[, sapply(data_for_clustering, is.numeric)])
wss <- (nrow(clients_imma_df_scaled) - 1) * sum(apply(clients_imma_df_scaled, 2, var))
for (i in 2:15) wss[i] <- sum(kmeans(clients_imma_df_scaled, centers = i)$withinss)
View(data_for_clustering)
selected_variables <- c(
"immatriculation_puissance",
"immatriculation_nbportes",
"immatriculation_prix",
"immatriculation_longueur",
"clients_age",
"clients_sexe",
"clients_situationfamiliale",
"clients_nbenfantacharge",
"clients_deuxiemevoiture"
)
# Créer un nouveau dataframe avec seulement les variables sélectionnées
data_for_clustering <- clients_imma_df_filtered[selected_variables]
# Scale numeric columns
clients_imma_df_scaled <- scale(data_for_clustering[, sapply(data_for_clustering, is.numeric)])
wss <- (nrow(clients_imma_df_scaled) - 1) * sum(apply(clients_imma_df_scaled, 2, var))
for (i in 2:15) wss[i] <- sum(kmeans(clients_imma_df_scaled, centers = i)$withinss)
View(data_for_clustering)
selected_variables <- c(
"immatriculation_puissance",
"immatriculation_nbportes",
"immatriculation_nbplaces",
"immatriculation_prix",
"immatriculation_longueur",
"clients_age",
"clients_sexe",
"clients_situationfamiliale",
"clients_nbenfantacharge",
"clients_deuxiemevoiture"
)
# Créer un nouveau dataframe avec seulement les variables sélectionnées
data_for_clustering <- clients_imma_df_filtered[selected_variables]
# Scale numeric columns
clients_imma_df_scaled <- scale(data_for_clustering[, sapply(data_for_clustering, is.numeric)])
wss <- (nrow(clients_imma_df_scaled) - 1) * sum(apply(clients_imma_df_scaled, 2, var))
View(clients_imma_df)
View(data_for_clustering)
selected_variables <- c(
"immatriculation_puissance",
"immatriculation_nbportes",
"immatriculation_nbplaces",
"immatriculation_prix",
"immatriculation_longueur",
"clients_age",
"clients_sexe",
"clients_situationfamiliale",
"clients_nbenfantacharge",
"clients_deuxiemevoiture"
)
# Créer un nouveau dataframe avec seulement les variables sélectionnées
data_for_clustering <- clients_imma_df_filtered[selected_variables]
# Installation/mise a jour des librairies
install.packages("cluster")
# Activation des librairies
library(cluster)
library(ggplot2)
# Lecture du fichier
produit <- read.csv("Data Produit QF.csv", header = TRUE, sep = ",", dec = ".", stringsAsFactors = T)
setwd("C:/Users/robso/OneDrive - Université Côte d'Azur/Etude/Master2/Data sciences et analyse de donnée avec R/Tutoriels - Corrections")
# Lecture du fichier
produit <- read.csv("Data Produit QF.csv", header = TRUE, sep = ",", dec = ".", stringsAsFactors = T)
View(produit)
# Suppression de la variable ID
produit <- produit[,-1]
# Modification du type de la variable Enfants en ordinal
produit$Enfants <- factor(as.factor(produit$Enfants), ordered=TRUE)
# Caracteristique de Enfants ordinale
mode(produit$Enfants)
class(produit$Enfants)
str(produit)
summary(produit)
# Calcul de la matrice de distance par la fonction daisy() pour variables heterogenes
dmatrix <- daisy(produit)
# Resume de la matrice
summary(dmatrix)
# K-means pour K = 4
km4 <- kmeans(dmatrix, 4)
# Repartition des classes Produit=Oui/Non par cluster
table(km4$cluster, produit$Produit)
# Histogramme des effectifs des clusters avec la classe en couleur
qplot(km4$cluster, data=produit, fill=Produit)
# Nuages de points avec classe en couleur
qplot(Enfants, as.factor(km4$cluster), data=produit, color=Produit) + geom_jitter(width = 0.3, height = 0.3)
qplot(Quotient_Familial, as.factor(km4$cluster), data=produit, color=Produit) + geom_jitter(height = 0.3)
qplot(Marie, as.factor(km4$cluster), data=produit, color=Produit) + geom_jitter(width = 0.3, height = 0.3)
# Nuages de points avec classe en couleur
qplot(Enfants, as.factor(km4$cluster), data=produit, color=Produit) + geom_jitter(width = 0.3, height = 0.3)
gc()
library(RJDBC)
library(ggplot2)
library(ggfortify)
library(RColorBrewer)
library(dplyr)
library(rpart)
library(rpart.plot)
hive_jdbc_jar <- "C:/Vm/INSTALL_MV_BIGDATA_BOX/lib/hive-jdbc-3.1.3-standalone.jar"
hive_driver <- "org.apache.hive.jdbc.HiveDriver"
hive_url <- "jdbc:hive2://localhost:10000/"
drv <- JDBC(hive_driver, hive_jdbc_jar, "`")
conn <- dbConnect(drv, hive_url, "oracle", "welcome1")
query <- "SELECT * FROM concessionaire.v_clients"
clients <- dbGetQuery(conn, query)
colnames(clients) <- sub("^v_clients\\.", "", colnames(clients))
clients$clients_nbenfantacharge <- factor(as.factor(clients$clients_nbenfantacharge), ordered=TRUE)
clients$immatriculation_nbplaces <- factor(as.factor(clients$immatriculation_nbplaces), ordered=TRUE)
clients$immatriculation_nbportes <- factor(as.factor(clients$immatriculation_nbportes), ordered=TRUE)
clients <- clients[-3,]
clients <- clients[,-3]
clients <- clients[,-4]
clients <- clients[,-4]
clients <- clients[,-4]
clients <- clients[,-4]
clients <- clients[,-8]
clients <- clients[,-10]
dmatrix <- daisy(clients)
library(cluster)
dmatrix <- daisy(clients)
clients$clients_situationfamiliale <- factor(as.factor(clients$clients_situationfamiliale), ordered=TRUE)
clients$clients_sexe <- factor(as.factor(clients$clients_sexe), ordered=TRUE)
clients$immatriculation_longueur <- factor(as.factor(clients$immatriculation_longueur), ordered=TRUE)
clients$immatriculation_occasion <- factor(as.factor(clients$immatriculation_occasion), ordered=TRUE)
dmatrix <- daisy(clients)
client_echantillon <- clients[10000,]
View(client_echantillon)
client_echantillon <- clients[-10000,]
dmatrix <- daisy(clients)
library(shiny)
library(bslib)
library(future)
plan(multisession)
hive_jdbc_jar <- "C:/Vm/INSTALL_MV_BIGDATA_BOX/lib/hive-jdbc-3.1.3-standalone.jar"
hive_driver <- "org.apache.hive.jdbc.HiveDriver"
hive_url <- "jdbc:hive2://localhost:10000/"
drv <- JDBC(hive_driver, hive_jdbc_jar, "`")
conn <- dbConnect(drv, hive_url, "oracle", "welcome1")
query <- "SELECT * FROM concessionaire.v_clients"
clients <- dbGetQuery(conn, query)
library(RJDBC)
library(ggplot2)
library(ggfortify)
library(RColorBrewer)
library(dplyr)
library(rpart)
library(rpart.plot)
library(cluster)
library(ggplot2)
clients <- dbGetQuery(conn, query)
conn <- dbConnect(drv, hive_url, "oracle", "welcome1")
drv <- JDBC(hive_driver, hive_jdbc_jar, "`")
conn <- dbConnect(drv, hive_url, "oracle", "welcome1")
conn <- dbConnect(drv, hive_url, "oracle", "welcome1")
query <- "SELECT * FROM concessionaire.v_clients"
clients <- dbGetQuery(conn, query)
mode(clients)
colnames(clients) <- sub("^v_clients\\.", "", colnames(clients))
clients$clients_nbenfantacharge <- factor(as.factor(clients$clients_nbenfantacharge), ordered=TRUE)
clients$clients_situationfamiliale <- factor(as.factor(clients$clients_situationfamiliale), ordered=TRUE)
clients$clients_sexe <- factor(as.factor(clients$clients_sexe), ordered=TRUE)
clients$immatriculation_nbportes <- factor(as.factor(clients$immatriculation_nbportes), ordered=TRUE)
clients$immatriculation_longueur <- factor(as.factor(clients$immatriculation_longueur), ordered=TRUE)
clients$immatriculation_nbportes <- factor(as.factor(clients$immatriculation_nbportes), ordered=TRUE)
clients$immatriculation_occasion <- factor(as.factor(clients$immatriculation_occasion), ordered=TRUE)
clients <- clients[,-3]
clients <- clients[,-5]
clients <- clients[,-5]
clients <- clients[,-5]
clients <- clients[,-9]
clients <- clients[,-9]
clients <- clients[,-9]
clients <- clients[,-9]
dmatrix <- daisy(clients)
library(RJDBC)
library(ggplot2)
library(ggfortify)
library(RColorBrewer)
library(dplyr)
library(rpart)
library(rpart.plot)
library(cluster)
library(ggplot2)
hive_jdbc_jar <- "C:/Vm/INSTALL_MV_BIGDATA_BOX/lib/hive-jdbc-3.1.3-standalone.jar"
hive_driver <- "org.apache.hive.jdbc.HiveDriver"
hive_url <- "jdbc:hive2://localhost:10000/"
drv <- JDBC(hive_driver, hive_jdbc_jar, "`")
conn <- dbConnect(drv, hive_url, "oracle", "welcome1")
query <- "SELECT * FROM concessionaire.v_clients"
clients <- dbGetQuery(conn, query)
library(ROracle)
detach("package:ROracle", unload = TRUE)
remove.packages("ROracle")
install.packages("ROracle")
install.packages("C:/Users/robso/Downloads/ROracle1.4-1_Windows.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/robso/Downloads/ROracle1.4-1_Windows/ROracle.zip", repos = NULL, type = "win.binary")
